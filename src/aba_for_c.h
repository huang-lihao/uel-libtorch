//=============================================================================
// COPYRIGHT DASSAULT SYSTEMES 2001-2013
/**
* @CAA2Level L0
* @CAA2Usage U0
*/
//=============================================================================
/****************************************************************************
 *                                                                          *
 *            ABAQUS FORTRAN-to-C calling convensions macros                *
 *                                                                          * 
 ****************************************************************************/

#ifndef FOR_C_H

#ifndef ABA_FOR_C_H
#define ABA_FOR_C_H

#if defined(ABQ_WIN86_64) || defined(ABQ_WIN86_32)
#include <omi_types.h>
#endif

#include <omi_for_types.h>

#if defined FOR_TRAIL

#define FOR_NAME(lower_case_name,UPPER_CASE_NAME)  lower_case_name ## _
#define CALL_NAME(lower_case_name,UPPER_CASE_NAME) lower_case_name ## _

#elif defined (ABQ_WIN86_32) || defined (ABQ_WIN86_64)

#define FOR_NAME(lower_case_name,UPPER_CASE_NAME)  _cdecl lower_case_name
#define CALL_NAME(lower_case_nane,UPPER_CASE_NAME) lower_case_name

#else

#define FOR_NAME(lower_case_name,upper_case_name)  lower_case_name
#define CALL_NAME(lower_case_name,upper_case_name) lower_case_name

#endif

/******************************************************************************
 * The rules for passing type CHARACTER from FORTRAN to C are as follows:     *
 *   1) All type CHARACTER arguments must appear before any other arguments   *
 *      in the list. The parameter should be declared as type "Character".    *
 *   2) A Length parameter for each Character parameter must be appended to   *
 *	the C parameter list. The name of the Length parameter should be      *
 *	constructed by adding "_len" to the Character parameter name.	      *
 *   3) The CHARACTER data must be accessed via the PTR(cname) macro, which   *
 *	defines a pointer to cname.					      *
 *   4) The length of the CHARACTER string may be obtained via the	      *
 *	LEN(cname,cnname_len) macro, which defines the length of cname.	      *
 * This allows capture of the ancilliary length arguments generated by UNIX   *
 * and C/370 systems. The VMS implementation ignores these extra parameters.  *
 ******************************************************************************/


#if defined(ABQ_WIN86_64)
typedef char *Character;
typedef int64 Length;
#define PTR(id) id
#define LEN(id,len) len
#define GETLEN(id) id ## _len
#define CHNAME(id) Character id
#define CHNAME_C(id) id
#define CHLEN(id) , const Length id ## _len
#define CHLEN_C(id) , id ## _len
#elif defined(ABQ_WIN86_32)
typedef char *Character;
typedef unsigned int Length;
#define PTR(id) id
#define LEN(id,len) len
#define GETLEN(id) id ## _len
#define CHNAME(id) Character id
#define CHNAME_C(id) id
#define CHLEN(id) , const Length id ## _len
#define CHLEN_C(id) , id ## _len
#elif defined(_WINDOWS_SOURCE)
typedef char *Character;
typedef unsigned int Length;
#define PTR(id) id
#define LEN(id,len) len
#define GETLEN(id) id ## _len
#define CHNAME(id) Character id, const Length id ## _len
#define CHNAME_C(id) id, id ## _len
#define CHLEN(id)
#define CHLEN_C(id)
#else 
typedef char *Character;
typedef int Length;
#define PTR(id) id
#define LEN(id,len) len
#define GETLEN(id) id ## _len
#define CHNAME(id) Character id
#define CHNAME_C(id) id
#define CHLEN(id) , const Length id ## _len
#define CHLEN_C(id) , id ## _len
#endif


#endif // ABA_FOR_C_H

#endif // FOR_C_H
